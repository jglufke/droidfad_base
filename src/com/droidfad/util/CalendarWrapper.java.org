/**
 * 
 */
package com.droidfad.util;

import java.util.Calendar;



/**
 *
 * @author John
 * copyright Jens Glufke, Germany mailto:jglufke@gmx.de
 *
 */
class CalendarWrapper {

	public static final int DATE        = Calendar.DATE;
	public static final int DAY_OF_WEEK = Calendar.DAY_OF_WEEK;
	public static final int MONTH       = Calendar.MONTH;
	public static final int SECOND      = Calendar.SECOND;
	public static final int YEAR        = Calendar.YEAR;
	public static final int HOUR_OF_DAY = Calendar.HOUR_OF_DAY;
	public static final int MINUTE      = Calendar.MINUTE;
	
	public static final int MONDAY      = Calendar.MONDAY;
	public static final int TUESDAY     = Calendar.TUESDAY;
	public static final int WEDNESDAY   = Calendar.WEDNESDAY;
	public static final int THURSDAY    = Calendar.THURSDAY;
	public static final int FRIDAY      = Calendar.FRIDAY;
	public static final int SATURDAY    = Calendar.SATURDAY;
	public static final int SUNDAY      = Calendar.SUNDAY;

	/**
	 *
	 * @return
	 *
	 */
	public static CalendarWrapper getInstance() {
		return new CalendarWrapper();
	}
	private Calendar calendar = null;

	private long gmtTime;

	private CalendarWrapper() {
		calendar = Calendar.getInstance();
	}

	/**
	 *
	 * @param pField
	 * @param pAmount
	 *
	 */
	public void add(long pGmtTime, int pField, int pAmount) {

		calendar.setTimeInMillis(pGmtTime);

		switch(pField) {
		case MONTH:
			calendar.add(MONTH, pAmount);
			gmtTime = CalendarCache.addMonths(pGmtTime, pAmount);
			break;
		case DATE:
			calendar.add(DATE, pAmount);
			gmtTime = calendar.getTimeInMillis();
			break;
		case SECOND:
			calendar.add(SECOND, pAmount);
			gmtTime = calendar.getTimeInMillis();
			break;
		default:
			throw new IllegalArgumentException("not handled field");
		}
	}

	/**
	 *
	 * @param pYearEnd
	 * @return
	 *
	 */
	public boolean before(long pGmtTime) {
		return gmtTime < pGmtTime;
	}

	/**
	 *
	 * @param pYear
	 * @return
	 *
	 */
	public int get(final int pField) {

		Calendar lCalendar = null;
		
		int lValue = 0;
		switch(pField) {
		case YEAR:
			lValue = CalendarCache.getYear(gmtTime);
			break;
		case MONTH:
			lValue = CalendarCache.getMonth(gmtTime);
			break;
		case DAY_OF_WEEK:
			lValue = CalendarCache.getDayOfWeek(gmtTime);
			break;
		case DATE:
			lValue = CalendarCache.getDay(gmtTime);
			break;
		case HOUR_OF_DAY:
		case MINUTE:
		case SECOND:
			lCalendar = Calendar.getInstance();
			lCalendar.setTimeInMillis(gmtTime);
			lValue = lCalendar.get(pField);
			break;
		default:
			throw new IllegalArgumentException("not handled field:" + pField);
		}
		return lValue; 
	}

	/**
	 *
	 * @return
	 *
	 */
	public Calendar getCalendar() {
		Calendar lCalendar = Calendar.getInstance();
		lCalendar.setTimeInMillis(gmtTime);
		return lCalendar;
	}

	/**
	 *
	 * @return
	 *
	 */
	public long getTimeInMillis() {
		return gmtTime;
	}

	/**
	 * 
	 *
	 * @param pField
	 * @param pValue
	 *
	 */
	public void setDay(int pValue) {
		calendar.set(DATE, pValue);
		gmtTime = CalendarCache.setDay(gmtTime, pValue);
	}

	/**
	 * 
	 *
	 * @param pYear
	 * @param pMonth
	 * @param pDay
	 *
	 */
	public void setStartOfDay(int pYear, int pMonth, int pDay) {
		calendar.set(pYear, pMonth, pDay, 0, 0, 0);
		gmtTime = calendar.getTimeInMillis();
	}

	/**
	 * 
	 *
	 * @param pYear
	 * @param pMonth
	 * @param pDay
	 *
	 */
	public void setEndOfDay(int pYear, int pMonth, int pDay) {
		calendar.set(pYear, pMonth, pDay, 23, 59, 59);
		gmtTime = calendar.getTimeInMillis();
	}
	/**
	 *
	 * @param pEnd
	 *
	 */
	public void setTimeInMillis(long pGmtTime) {
		calendar.setTimeInMillis(pGmtTime);
		gmtTime = pGmtTime;
	}

	/**
	 *
	 * @param pField
	 * @param pAmount
	 *
	 */
	public void set(int pField, int pAmount) {
		Calendar lCalendar = null;
		switch(pField) {
		case YEAR:
		case MONTH:
			lCalendar = Calendar.getInstance();
			lCalendar.setTimeInMillis(gmtTime);
			lCalendar.set(pField, pAmount);
			gmtTime   = lCalendar.getTimeInMillis(); 
			break;
		case DATE:
			setDay(pAmount);
			break;
		default:
			throw new IllegalArgumentException("not handled field:" + pField);
		}
	}
}
